<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Procedures on Rust Lang - Compiler Team</title><link>https://rust-lang.github.io/compiler-team/procedures/</link><description>Recent content in Procedures on Rust Lang - Compiler Team</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://rust-lang.github.io/compiler-team/procedures/index.xml" rel="self" type="application/rss+xml"/><item><title>Call for participation</title><link>https://rust-lang.github.io/compiler-team/procedures/call-for-participation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/procedures/call-for-participation/</guid><description>Call for participation One way to get help with a project is to issue a call for participation on the dedicated internals thread.
Such calls should follow this (very simple) template, so as to help clarify what&amp;rsquo;s going on:
- **Title:** Investigate #123141 - **Experience level expected:** (Newcomer | Contributor | Experienced) - **Urgency:** (ASAP | over next few months | whenever) - **Contact:** @your-name-here in [the #your-stream-here stream on Zulip][z] [z]: https://rust-lang.</description></item><item><title>Forming a new working group</title><link>https://rust-lang.github.io/compiler-team/procedures/form-new-working-group/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/procedures/form-new-working-group/</guid><description>Forming a new working group So, you would like to form a working group?
Step 0. What is a working group? Working groups are the basic way that the compiler team tracks what is going on. If you are doing some sort of task that the compiler team will want to track over time, then it makes sense to form a working group, even if you don&amp;rsquo;t plan to be getting more people involved.</description></item><item><title>Steering meeting</title><link>https://rust-lang.github.io/compiler-team/procedures/steering-meeting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/procedures/steering-meeting/</guid><description>Steering meeting This content has moved to the Rust forge.</description></item><item><title>Third Party out of tree crates</title><link>https://rust-lang.github.io/compiler-team/procedures/crates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/procedures/crates/</guid><description>Third-party and out-of-tree crates This document describe the guidelines for creating out-of-tree crates for use in the compiler and using third-party crates within the compiler. These guidelines were originally discussed at the Rust All Hands 2019 by the compiler team and others; and then at the 01/03/2019 steering meeting.
Out-of-tree crates One of the primary goals of this policy is to ensure that there is consistency in how out-of-tree crates used in the compiler are set up (at least, those maintained by the compiler team and living in rust-lang) and that the experience is uniform across rust-lang/rust and these crates.</description></item></channel></rss>
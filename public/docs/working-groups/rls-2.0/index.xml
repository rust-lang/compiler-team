<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rust Lang - Compiler Team</title>
    <link>/docs/working-groups/rls-2.0/</link>
    <description>Recent content on Rust Lang - Compiler Team</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/docs/working-groups/rls-2.0/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>/docs/working-groups/rls-2.0/faq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/working-groups/rls-2.0/faq/</guid>
      <description> Frequently asked questions </description>
    </item>
    
    <item>
      <title></title>
      <link>/docs/working-groups/rls-2.0/notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/working-groups/rls-2.0/notes/</guid>
      <description>2019-02-20 Notes from &amp;ldquo;Design of syntax trees&amp;rdquo; meeting Zulip stream
We haven&amp;rsquo;t nailed down the exact design, but we&amp;rsquo;ve covered the design space a bit, and formulated interesting questions to evaluate designs:
 What are the requirements of IDEs? Full-fidelity trees, &amp;ldquo;common super type&amp;rdquo; of nodes for bottom-up traversals. Should queries reach inside of the syntax tree? In general, how incremental computation works with syntax trees? Offsets are bad for incremental (change a lot), parent pointers are bad for incremental (give access to too much context).</description>
    </item>
    
  </channel>
</rss>
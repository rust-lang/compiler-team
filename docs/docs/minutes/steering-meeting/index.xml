<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rust Lang - Compiler Team</title><link>https://unbalancedparentheses.github.io/compiler-team/docs/minutes/steering-meeting/</link><description>Recent content on Rust Lang - Compiler Team</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://unbalancedparentheses.github.io/compiler-team/docs/minutes/steering-meeting/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://unbalancedparentheses.github.io/compiler-team/docs/minutes/steering-meeting/2018.10.26/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://unbalancedparentheses.github.io/compiler-team/docs/minutes/steering-meeting/2018.10.26/</guid><description>2018-10-26 We had our first T-compiler steering meeting today! What follows is a summary of the major points raised during the discussion. If you&amp;rsquo;d like to read the detailed minutes, please see the Zulip chat log. I&amp;rsquo;ll insert links here and there into that log where appropriate, if you want to see the original comment.
To start, before the meeting we did a survey asking folks what they thought worked well and what needed improvement in and around with the compiler team.</description></item><item><title/><link>https://unbalancedparentheses.github.io/compiler-team/docs/minutes/steering-meeting/2018.11.16/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://unbalancedparentheses.github.io/compiler-team/docs/minutes/steering-meeting/2018.11.16/</guid><description>2018.11.16 The topic of today&amp;rsquo;s steering meeting was future planning. Specifically, we were looking at some of the ideas we&amp;rsquo;ve had for major initiatives and trying to drill into them and make them more concrete. You can read the full thread over on Zulip.
We began by observing that the ultimate decisions we make here will be very influenced by the number of leaders we can find, and what they want to do, and ultimately decided to focus first on the technical angle before thinking about what leaders we have etc.</description></item><item><title/><link>https://unbalancedparentheses.github.io/compiler-team/docs/minutes/steering-meeting/2018.12.14/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://unbalancedparentheses.github.io/compiler-team/docs/minutes/steering-meeting/2018.12.14/</guid><description>2018.12.14 The steering meeting was focused on mentoring. Some of the prompting questions:
How can we help move people from &amp;ldquo;working group participant&amp;rdquo; to &amp;ldquo;full-fledged team member&amp;rdquo;? How can we reduce the &amp;ldquo;bus factor&amp;rdquo; for cricial modules like the type checker, type resolver, etc? A summary of the major points raised follows. If you prefer, you can read the full transcript on Zulip.
Major points: Mentoring it seems good to try and list out the parts of the compiler and who is an expert in each one, perhaps in some kind of &amp;ldquo;introduction to the compiler team&amp;rdquo; page on the repository this can help identify where to direct your questions about code X but also where we need to increase the number of knowledgable people it would be great if we had an organized off-ramp system for folks who have been active in a working group and are looking to broaden their knowledge maybe we can pair up such folks with someone more experienced this is a different sort of mentoring, since active people from a WG are already familiar with how the compiler works, and thus able to work at a higher level we need to find a way to make it easier to find &amp;ldquo;intermediate-level mentoring opportunities&amp;rdquo;.</description></item><item><title/><link>https://unbalancedparentheses.github.io/compiler-team/docs/minutes/steering-meeting/2019.01.04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://unbalancedparentheses.github.io/compiler-team/docs/minutes/steering-meeting/2019.01.04/</guid><description>2019.01.04 Zulip topic
We discussed the upcoming Rust All Hands. We have a HackMd document that lists a bunch of ideas for what to talk about, but mostly we talked about how to structure the meeting itself.
We summarized how the All Hands was structured last year: basically meetings focused around particular topics, with the team (and others) mostly in a kind of semi-circle or around a whiteboard.
One of the ideas we had for this year is that we could have some sessions that are just focused on explaining how a particular area of the code works, which could help people unfamiliar with an area get up to speed.</description></item><item><title/><link>https://unbalancedparentheses.github.io/compiler-team/docs/minutes/steering-meeting/2019.01.17/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://unbalancedparentheses.github.io/compiler-team/docs/minutes/steering-meeting/2019.01.17/</guid><description>2019.01.17 Zulip topic
We discussed the upcoming Rust All Hands.
One of the first things we focused on is trying to get consensus about what the P1 Problems are that we are aiming to tackle. Our goal is to have this list complete before the all hands. Our initial list looked like this:
compilation time better compilation time investigation tools/analysis this should work in cooperation with cargo, so we can see whole story rls, completions “too hard to do anything” — technical debt “too hard to find people to do things” — organizational debt hard to learn, monolithic architecture poorly documented long compilation times, memory requirements Looking at it, we realized a few things:</description></item><item><title/><link>https://unbalancedparentheses.github.io/compiler-team/docs/minutes/steering-meeting/2019.03.01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://unbalancedparentheses.github.io/compiler-team/docs/minutes/steering-meeting/2019.03.01/</guid><description>2019.03.01 Zulip topic
Before the meeting started, @nikomatsakis proposed an agenda and linked to a document to collect agenda ideas for future meetings.
Also, @mw asked about discussing the policy for out-of-tree compiler crates (expanding on discussions from the All Hands&amp;rsquo; organizational meeting), a draft for which was already in-progress by @davidtwco.
The meeting commenced with a call for involvement in the RLS 2.0 working group led by @matklad as sharing expertise between the RLS 2.</description></item><item><title/><link>https://unbalancedparentheses.github.io/compiler-team/docs/minutes/steering-meeting/2019.03.22/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://unbalancedparentheses.github.io/compiler-team/docs/minutes/steering-meeting/2019.03.22/</guid><description>2019.03.22 Zulip topic.
Announcements oli-obk mentions that wg-diagnostics is planning to use the annotate-snippets crate within rustc. nikomatsakis is planning, as part of the @WG-meta working group, an RFC that will propose more intermediate levels for the compiler team to recognize committed, regular contributors. Zoxc almost has a series of PRs pushing queries all the way back to parsing. davidtwco has, after numerous attempts, managed to produce a have a working branch that unblocks RFC 2008.</description></item><item><title/><link>https://unbalancedparentheses.github.io/compiler-team/docs/minutes/steering-meeting/2019.04.12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://unbalancedparentheses.github.io/compiler-team/docs/minutes/steering-meeting/2019.04.12/</guid><description>2019.04.12 Zulip topic.
Announcements nikomatsakis has opened a PR with a draft RFC on the compiler-team repository. This RFC describes adding a new level (&amp;ldquo;compiler team contributors&amp;rdquo;) to recognize people who have been contributing regularly. It also tries to document a few things about members etc. Please give it a read! eddyb is nearing completion on their work on the symbol naming revamp. It might even offer some performance improvements.</description></item></channel></rss>
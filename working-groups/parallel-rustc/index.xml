<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Parallel-rustc Working Group on Rust Lang - Compiler Team</title><link>https://rust-lang.github.io/compiler-team/working-groups/parallel-rustc/</link><description>Recent content in Parallel-rustc Working Group on Rust Lang - Compiler Team</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://rust-lang.github.io/compiler-team/working-groups/parallel-rustc/index.xml" rel="self" type="application/rss+xml"/><item><title>2019.05.10</title><link>https://rust-lang.github.io/compiler-team/working-groups/parallel-rustc/minutes/2019.05.10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/working-groups/parallel-rustc/minutes/2019.05.10/</guid><description>2019.05.10 Zulip topic.
Plan for parallel-rustc Gather the performance data of the feature internally Make a &amp;ldquo;go/no-go&amp;rdquo; decision based on the data Overall conclusions The overall conclusions was that before shipping we should improve the documentation. To that end, we are trying to gather major design questions in a hackmd document. Here is a link to the start of a discussion about documentation.
Gathered data The most important data on our plan are recorded on hackmd.</description></item><item><title>2019.09.30-planning</title><link>https://rust-lang.github.io/compiler-team/working-groups/parallel-rustc/minutes/2019.09.30-planning/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/working-groups/parallel-rustc/minutes/2019.09.30-planning/</guid><description>2019.09.30 Planning Meeting Zulip topic.
Roadmap Sequential overhead Rerun perf benchmark with -j1 (but not limiting parallel codegen) and identify hotspots Identify cases one by one and optimize Overly fine-grained locking risks subtle ordering or dead-lock bugs Solution: audit Poor jobserver integration leading to overall poor scaling Little public testing of correctness and performance Call for permance testing, asking for data with -Ztimings requires us to have easy builds available, perhaps?</description></item><item><title>FAQs</title><link>https://rust-lang.github.io/compiler-team/working-groups/parallel-rustc/FAQ/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/working-groups/parallel-rustc/FAQ/</guid><description>Frequently Asked Questions (FAQ) Looks like no questions have been asked yet! If you have a question, feel free to file an issue or ask in the working group&amp;rsquo;s Zulip stream.</description></item><item><title>Notes</title><link>https://rust-lang.github.io/compiler-team/working-groups/parallel-rustc/NOTES/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rust-lang.github.io/compiler-team/working-groups/parallel-rustc/NOTES/</guid><description>This working group hasn&amp;rsquo;t had any meetings yet. parallel-rustc Meeting Notes This document contains meeting notes from the parallel-rustc working group.</description></item></channel></rss>